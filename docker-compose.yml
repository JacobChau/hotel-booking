version: '3.8'

services:
  # Backend service (Laravel API)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: hotel-booking-backend
    ports:
      - "8000:80"
    volumes:
      - ./backend:/var/www
      - backend_storage:/var/www/storage
      - backend_cache:/var/www/bootstrap/cache
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - APP_ENV=local
      - APP_DEBUG=true
      - APP_KEY=base64:your-local-key-here
      - APP_URL=http://localhost:8000
      - FRONTEND_URL=http://localhost:3000
      - DB_CONNECTION=pgsql
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_DATABASE=hotel_booking
      - DB_USERNAME=hotel_user
      - DB_PASSWORD=password
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - SANCTUM_STATEFUL_DOMAINS=localhost:3000
      - SESSION_DOMAIN=localhost
    networks:
      - hotel-booking-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend service (Vue.js + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    container_name: hotel-booking-frontend
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    environment:
      - VITE_API_URL=http://localhost:8000
      - NODE_ENV=development
    depends_on:
      - backend
    networks:
      - hotel-booking-network
    command: npm run dev

  # PostgreSQL database
  postgres:
    image: postgres:16-alpine
    container_name: hotel-booking-postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: hotel_booking
      POSTGRES_USER: hotel_user
      POSTGRES_PASSWORD: password
      POSTGRES_ROOT_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/database/init:/docker-entrypoint-initdb.d
    networks:
      - hotel-booking-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hotel_user -d hotel_booking"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis for caching and sessions
  redis:
    image: redis:7-alpine
    container_name: hotel-booking-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hotel-booking-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  backend_storage:
    driver: local
  backend_cache:
    driver: local
  frontend_node_modules:
    driver: local

networks:
  hotel-booking-network:
    driver: bridge
